import { URL } from 'node:url';
import { pick } from 'lodash-es';
import { defu } from 'defu';
import { useLogger, fetchUrlRaw, normaliseHost } from '@unlighthouse/core';
import consola from 'consola';
import cac from 'cac';

class PrettyError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
    if (typeof Error.captureStackTrace === "function")
      Error.captureStackTrace(this, this.constructor);
    else
      this.stack = new Error(message).stack;
  }
}
function handleError(error) {
  if (error instanceof PrettyError)
    consola.error(error.message);
  else
    consola.error(error);
  process.exit(1);
}

async function validateHost(resolvedConfig) {
  const logger = useLogger();
  if (resolvedConfig.site) {
    logger.debug(`Testing Site \`${resolvedConfig.site}\` is valid.`);
    const { valid, response, error, redirected, redirectUrl } = await fetchUrlRaw(resolvedConfig.site, resolvedConfig);
    if (!valid) {
      if (response?.status)
        logger.warn(`Request to site \`${resolvedConfig.site}\` returned an invalid http status code \`${response.status}\`. Please check the URL is valid.`);
      else
        logger.warn(`Request to site \`${resolvedConfig.site}\` threw an unhandled exception. Please check the URL is valid.`, error);
      logger.error("Site check failed. will attempt to proceed but may fail.");
    } else if (response) {
      if (redirected && redirectUrl && !redirectUrl.includes(".")) {
        logger.success(`Request to site \`${resolvedConfig.site}\` redirected to \`${redirectUrl}\`, using that as the site.`);
        resolvedConfig.site = normaliseHost(redirectUrl);
      } else {
        logger.success(`Successfully connected to \`${resolvedConfig.site}\`. (Status: \`${response.status}\`).`);
      }
    }
  }
}
function isValidUrl(s) {
  try {
    const url = new URL(s);
    return !!url;
  } catch (err) {
    return false;
  }
}
function validateOptions(resolvedOptions) {
  if (!resolvedOptions.site)
    return handleError("Please provide a site to scan with --site <url>.");
  if (!isValidUrl(resolvedOptions.site))
    return handleError("Please provide a valid site URL.");
}
function pickOptions(options) {
  const picked = {};
  picked.scanner = {};
  picked.urls = [];
  if (options.noCache)
    picked.cache = true;
  if (options.throttle)
    picked.scanner.throttle = true;
  if (options.sitemaps) {
    picked.scanner.sitemap = picked.scanner.sitemap || [];
    options.sitemaps.split(",").forEach((path) => {
      Array.isArray(picked.scanner.sitemap) && picked.scanner.sitemap.push(path);
    });
  }
  if (options.enableJavascript)
    picked.scanner.skipJavascript = false;
  else if (options.disableJavascript)
    picked.scanner.skipJavascript = true;
  if (options.samples)
    picked.scanner.samples = options.samples;
  if (options.enableI18nPages)
    picked.scanner.ignoreI18nPages = false;
  else if (options.disableI18nPages)
    picked.scanner.ignoreI18nPages = true;
  if (options.desktop)
    picked.scanner.device = "desktop";
  else if (options.mobile)
    picked.scanner.device = "mobile";
  if (options.disableRobotsTxt)
    picked.scanner.robotsTxt = false;
  if (options.disableSitemap)
    picked.scanner.sitemap = false;
  if (options.urls)
    picked.urls = options.urls.split(",");
  if (options.excludeUrls)
    picked.scanner.exclude = options.excludeUrls.split(",");
  if (options.includeUrls)
    picked.scanner.include = options.includeUrls.split(",");
  if (options.disableDynamicSampling)
    picked.scanner.dynamicSampling = false;
  if (options.auth) {
    const [username, password] = options.auth.split(":");
    picked.auth = { username, password };
  }
  if (options.cookies) {
    picked.cookies = options.cookies.split(";").map((cookie) => {
      const [name, value] = cookie.split("=");
      return { name, value };
    });
  }
  if (options.extraHeaders) {
    picked.extraHeaders = picked.extraHeaders || {};
    options.extraHeaders.split(",").forEach((header) => {
      const [name, value] = header.split("=");
      picked.extraHeaders[name] = value;
    });
  }
  const config = pick(options, [
    // root level options
    "samples",
    "site",
    "root",
    "configFile",
    "debug",
    "cache",
    "outputPath",
    "routerPrefix"
  ]);
  return defu(
    config,
    picked
  );
}

const version = "0.8.6";

function createCli() {
  const cli = cac("unlighthouse");
  cli.help().version(version).example("unlighthouse --site unlighthouse.dev").example("unlighthouse --site unlighthouse.dev --urls /guide,/api,/glossary --desktop");
  cli.option("--root <root>", "Define the project root. Useful for changing where the config is read from or setting up sampling.");
  cli.option("--config-file <config-file>", "Path to config file.");
  cli.option("--output-path <output-path>", "Path to save the contents of the client and reports to.");
  cli.option("--no-cache", "Disable the caching.");
  cli.option("--cache", "Enable the caching.");
  cli.option("--desktop", "Simulate device as desktop.");
  cli.option("--mobile", "Simulate device as mobile.");
  cli.option("--site <site>", "Host URL to scan.");
  cli.option("--router-prefix <site>", "The URL path prefix for the client and API to run from.");
  cli.option("--sitemaps <sitemaps>", "Comma seperated list of sitemaps to use for scanning.");
  cli.option("--samples <samples>", "Specify the amount of samples to run.");
  cli.option("--throttle", "Enable the throttling");
  cli.option("--enable-javascript", "When inspecting the HTML wait for the javascript to execute. Useful for SPAs.");
  cli.option("--disable-javascript", "When inspecting the HTML, don't wait for the javascript to execute.");
  cli.option("--enable-i18n-pages", "Enable scanning pages which use x-default.");
  cli.option("--disable-i18n-pages", "Disable scanning pages which use x-default.");
  cli.option("--urls <urls>", "Specify explicit relative paths to scan as a comma-seperated list, disabling the link crawler.");
  cli.option("--exclude-urls <urls>", "Relative paths (string or regex) to exclude as a comma-separated list.");
  cli.option("--include-urls <urls>", "Relative paths (string or regex) to include as a comma-separated list.");
  cli.option("--disable-robots-txt", "Disables the robots.txt crawling.");
  cli.option("--disable-sitemap", "Disables the sitemap.xml crawling.");
  cli.option("--disable-dynamic-sampling", "Disables the sampling of paths.");
  cli.option("-d, --debug", "Debug. Enable debugging in the logger.");
  return cli;
}

export { validateOptions as a, createCli as c, handleError as h, pickOptions as p, validateHost as v };
