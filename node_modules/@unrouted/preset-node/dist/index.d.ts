import * as _unrouted_core from '@unrouted/core';
import { CompressionOptions } from 'compression';
import { IncomingMessage, ServerResponse } from 'http';
import { Stats } from 'fs';

type Arrayable<T> = T | T[];
interface SirvOptions {
    dev?: boolean;
    etag?: boolean;
    maxAge?: number;
    immutable?: boolean;
    single?: string | boolean;
    ignores?: false | Arrayable<string | RegExp>;
    extensions?: string[];
    dotfiles?: boolean;
    brotli?: boolean;
    gzip?: boolean;
    onNoMatch?: (req: IncomingMessage, res: ServerResponse) => void;
    setHeaders?: (res: ServerResponse, pathname: string, stats: Stats) => void;
}
interface ServeArguments {
    path: string;
    dirname: string;
    sirvOptions?: SirvOptions;
}
/**
 * Serve static files from a directory using sirv.
 */
declare const serve: (path: string, dirname: string, sirvOptions?: SirvOptions) => void;

interface PresetConfig {
    compression?: CompressionOptions;
    generateTypes: boolean;
    generateTypesPath: string;
    setupRoutesPath: string;
    watchRouteExportsPath?: string;
    watchRouteExportsPattern?: string;
    overrideUnroutedModule: boolean;
}
declare const presetNode: (options?: Partial<PresetConfig> | undefined) => _unrouted_core.ResolvedPlugin;

export { PresetConfig, ServeArguments, presetNode, serve };
