import { FetchOptions } from 'ohmyfetch';
import { GetRoutes, PostRoutes, PutRoutes, PatchRoutes, DeleteRoutes, OptionsRoutes } from '@unrouted/core';

type ValueOf<C> = C extends Record<any, any> ? C[keyof C] : never;
type RoutesKey<Route extends string, C> = ValueOf<{
    [key in keyof C]: Route extends key | '/' ? key : never;
}>;
type MiddlewareOf<Route extends string, C> = Exclude<C[RoutesKey<Route, C>], Error | void>;
type TypedInternalResponse<Route, Default, C> = Default extends string | boolean | number | null | void | object ? Default : Route extends string ? MiddlewareOf<Route, C> extends never ? Default : MiddlewareOf<Route, C> : Default;

declare function $get<R extends string, Default = unknown>(url: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, Default, GetRoutes>>;
declare function $post<R extends string, Default = unknown>(url: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, Default, PostRoutes>>;
declare function $patch<R extends string, Default = unknown>(url: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, Default, PutRoutes>>;
declare function $put<R extends string, Default = unknown>(url: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, Default, PatchRoutes>>;
declare function $delete<R extends string, Default = unknown>(url: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, Default, DeleteRoutes>>;
declare function $options<R extends string, Default = unknown>(url: R, opts?: FetchOptions): Promise<TypedInternalResponse<R, Default, OptionsRoutes>>;

export { $delete, $get, $options, $patch, $post, $put, MiddlewareOf, RoutesKey, TypedInternalResponse, ValueOf };
